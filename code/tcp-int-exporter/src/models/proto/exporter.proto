syntax = "proto3";
package tcpint;

option go_package = "/tcpint";

// TcpIntMsg is used in gRPC client/server communication.
message TcpIntMsg {
    bytes ts_us = 1;
    optional uint32 family = 2; //address family type: 2 for ipv4, 10 for ipv6
    optional uint32 source_port = 3;
    optional uint32 destination_port = 4;
    string source_ip = 5;
    string destination_ip = 6;
    optional uint32 final_ttl = 7; //ttl of the packet at the switch with max int_value
    uint32 congestion_window = 8; //units: bytes(cwnd * mss)
    uint32 round_trip_time = 9; //units: nano seconds
    uint32 rate = 10; //units: pkts
    uint32 rate_interval = 11;  //units: micro seconds
    uint32 max_segment_size = 12; //units: bytes
    uint32 int_value = 13;
    uint32 latencies_outgoing_sum = 14; //units: nano seconds
    uint32 latencies_return_sum = 15; //units: nano seconds
    uint32 queue_depth = 16; //qdepth when pkts was dequeued in the switch with highest queue depth
    uint32 bandwidth = 17; //units: MB/s
    double utilization = 18; //units: % utilization averaged over 1 second in the switch with highest link utilization
    uint32 count = 19; //required for druid not populated by tcpint client
    string timestamp = 20; //required for druid not populated by tcpint client
    optional uint32 initial_ttl = 21; //original ttl
    uint32 lost_out = 22; //number of lost packets
}

message TcpIntMsgs {
    repeated TcpIntMsg msgs = 1;
}

message TcpIntResponse {
    int32 status = 1;
    string message = 2;
}

service TcpIntService {
    rpc CreateTcpIntMsgs (TcpIntMsgs) returns (TcpIntResponse);
}
